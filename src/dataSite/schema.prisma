generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CULTURAL_AGENT
}

enum Importance {
  HIGH
  MEDIUM
  LOW
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações com Attraction
  registeredAttractions Attraction[] @relation("RegisteredBy")
  updatedAttractions    Attraction[] @relation("UpdatedBy")
  deletedAttractions    Attraction[] @relation("DeletedBy")

  // Relações com CulturalAgent
  registeredCulturalAgents CulturalAgent[] @relation("RegisteredBy")
  updatedCulturalAgents    CulturalAgent[] @relation("UpdatedBy")
  deletedCulturalAgents    CulturalAgent[] @relation("DeletedBy")

  // Relações com Campanhas
  registeredCampaign Campaign[] @relation("RegisteredBy")
  updatedCampaign    Campaign[] @relation("UpdatedBy")
  deletedCampaign    Campaign[] @relation("DeletedBy")

  registeredLog AuditLog[]

  @@map("users")
}

model Attraction {
  id        String    @id @default(uuid())
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  deletedAt DateTime?

  @@map("attractions")
}

model AttractionCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attractions Attraction[]

  @@map("attraction_categories")
}

model AttractionPhoto {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attraction   Attraction? @relation("AttractionPhotos", fields: [attractionId], references: [id])
  attractionId String?

  @@map("attraction_photos")
}

model AttractionVideo {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attraction   Attraction? @relation("AttractionVideos", fields: [attractionId], references: [id])
  attractionId String?

  @@map("attraction_videos")
}

model CulturalAgent {
  id             String    @id @default(uuid())
  name           String
  description    String
  historicalInfo String
  qrCodeImage    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isActive       Boolean   @default(true)
  deletedAt      DateTime?

  categoryId Int
  category   CulturalAgentCategory @relation("CategoryToCulturalAgents", fields: [categoryId], references: [id])

  // Auditoria
  registeredBy   User?   @relation("RegisteredBy", fields: [registeredById], references: [id])
  registeredById String?

  updatedBy   User?   @relation("UpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  deletedBy   User?   @relation("DeletedBy", fields: [deletedById], references: [id])
  deletedById String?

  contact   Contact? @relation("CulturalAgentContacts", fields: [contactId], references: [id])
  contactId String?

  photos CulturalAgentPhoto[] @relation("CulturalAgentPhotos")
  videos CulturalAgentVideo[] @relation("CulturalAgentVideos")

  @@map("cultural_agents")
}

model CulturalAgentCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  culturalAgents CulturalAgent[] @relation("CategoryToCulturalAgents")

  @@map("cultural_agent_categories")
}

model CulturalAgentPhoto {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  culturalAgent   CulturalAgent? @relation("CulturalAgentPhotos", fields: [culturalAgentId], references: [id])
  culturalAgentId String?

  @@map("cultural_agent_photos")
}

model CulturalAgentVideo {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  culturalAgent   CulturalAgent? @relation("CulturalAgentVideos", fields: [culturalAgentId], references: [id])
  culturalAgentId String?

  @@map("cultural_agent_videos")
}

model Campaign {
  id        String    @id @default(uuid())
  name      String
  isActive  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Campo para soft delete

  // Auditoria
  registeredBy   User?   @relation("RegisteredBy", fields: [registeredById], references: [id])
  registeredById String?

  updatedBy   User?   @relation("UpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  deletedBy   User?    @relation("DeletedBy", fields: [deletedById], references: [id])
  deletedById String?
  // Relacionamento com Banner
  banners     Banner[] @relation("CampaignBanners")

  @@map("campaigns")
}

model Banner {
  id        String    @id @default(uuid())
  url       String
  link      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Campo para soft delete

  // Relacionamento com Campaign
  campaignId String
  campaign   Campaign @relation("CampaignBanners", fields: [campaignId], references: [id])

  @@map("banners")
}

model AuditLog {
  id          String   @id @default(uuid())
  entity      String // Nome da entidade (ex: Attraction, Campaign)
  entityId    String // ID do registro afetado
  action      String // Ação (ex: CREATE, UPDATE, DELETE)
  userId      String // ID do usuário que executou a ação
  timestamp   DateTime @default(now()) // Data e hora da ação
  oldValues   Json? // Valores antigos, antes da atualização (para UPDATE)
  newValues   Json? // Novos valores inseridos ou alterados (para CREATE ou UPDATE)
  description String? // Descrição da ação (opcional)

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
